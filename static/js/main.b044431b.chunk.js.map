{"version":3,"sources":["components/jumbotron.js","components/recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Jumbotron","className","style","fontSize","fontWeight","Recipe","title","dietLabels","healthLabels","image","ingredients","recipe","map","ingredient","text","join","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","process","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","module","exports"],"mappings":"mNAceA,MAZf,WACI,OACI,mCACI,qBAAKC,UAAU,4BAAf,SACI,qBAAKA,UAAU,YAAf,SACI,oBAAIA,UAAU,YAAYC,MAAO,CAACC,SAAU,OAAQC,WAAY,QAAhE,+B,gBCwBLC,MA5Bf,YAA0E,IAAxDC,EAAuD,EAAvDA,MAAOC,EAAgD,EAAhDA,WAAYC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,YACtD,OACI,mCACA,qBAAKT,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,sBAAKA,UAAWC,IAAMS,OAAtB,UACI,6BAAKL,IACL,8CAEKI,EAAYE,KAAI,SAAAC,GAAU,OACvB,6BAAKA,EAAWC,aAGxB,6CAAgBP,KAChB,+CACeC,EAAaO,KAAK,UAEjC,qBAAKd,UAAWC,IAAMO,MAAOO,IAAKP,EAAOQ,IAAI,iBCuCtDC,MAvDf,WAEE,IAFa,EAKiBC,mBAAS,IAL1B,mBAKNC,EALM,KAKGC,EALH,OAMeF,mBAAS,IANxB,mBAMNG,EANM,KAMEC,EANF,OAOaJ,mBAAS,WAPtB,mBAONK,EAPM,KAOCC,EAPD,KASbC,qBAAU,WACRC,MAEG,CAACH,IAEN,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAbfM,WAae,oBAZfA,qCAWI,cACXC,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBZ,EAAWY,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAkBhB,OACE,sBAAKjC,UAAU,MAAf,UACA,cAAC,EAAD,IACA,uBAAMoC,SATU,SAAAC,GAChBA,EAAEC,iBACFd,EAASH,GACTC,EAAU,KAMiBtB,UAAU,cAArC,UACE,uBAAOuC,KAAK,OAAOvC,UAAU,aAAawC,MAAOnB,EAAQoB,SAdxC,SAAAJ,GACnBf,EAAUe,EAAEK,OAAOF,UAcjB,wBAAQD,KAAK,SAASvC,UAAU,qBAAhC,uBAEF,qBAAKA,UAAU,UAAf,SACCmB,EAAQR,KAAI,SAAAD,GAAM,OACjB,cAAC,EAAD,CAEAL,MAAOK,EAAOA,OAAOiC,MACrBrC,WAAYI,EAAOA,OAAOJ,WAC1BC,aAAcG,EAAOA,OAAOH,aAC5BC,MAAOE,EAAOA,OAAOF,MACrBC,YAAaC,EAAOA,OAAOD,aALtBC,EAAOA,OAAOiC,gBCnCVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAMhDZ,K,kBCVAa,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.b044431b.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Jumbotron() {\n    return (\n        <>\n            <div className=\"jumbotron jumbotron-fluid\">\n                <div className=\"container\">\n                    <h1 className=\"display-4\" style={{fontSize: \"60px\", fontWeight: \"bold\"}}>Recipe App</h1>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport style from \"../recipe.module.css\";\n\nfunction Recipe({ title, dietLabels, healthLabels, image, ingredients }) {\n    return (\n        <>\n        <div className=\"container\"> \n            <div className=\"row\">\n                <div className=\"col-sm\"> \n                    <div className={style.recipe}>\n                        <h1>{title}</h1>\n                        <ol>\n                            Ingredients:\n                            {ingredients.map(ingredient => (\n                                <li>{ingredient.text}</li>\n                            ))}\n                        </ol>\n                        <p>Diet Label: {dietLabels}</p>\n                        <p>\n                        Health Label: {healthLabels.join(\" , \")}\n                        </p>\n                        <img className={style.image} src={image} alt=\"\"></img>\n                    </div>\n                </div>    \n            </div>\n        </div>    \n\n\n        </>\n    )\n}\nexport default Recipe;","import React, {useEffect, useState} from \"react\";\nimport './App.css';\nimport Jumbotron from './components/jumbotron';\nimport Recipe from \"./components/recipe\";\n\nfunction App() {\n\n  const APP_ID = process.env.REACT_APP_RECIPE_APP_ID;\n  const APP_KEY= process.env.REACT_APP_RECIPE_APP_KEY;\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  useEffect(() => {\n    getRecipes()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n    \n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n    <Jumbotron/>\n    <form onSubmit={getSearch} className=\"search-form\">\n      <input type=\"text\" className=\"search-bar\" value={search} onChange={updateSearch}></input>\n      <button type=\"submit\" className=\"btn btn-danger m-4\">Search</button>\n    </form>\n    <div className=\"recipes\"> \n    {recipes.map(recipe =>(\n      <Recipe \n      key={recipe.recipe.label}\n      title={recipe.recipe.label}\n      dietLabels={recipe.recipe.dietLabels}\n      healthLabels={recipe.recipe.healthLabels}\n      image={recipe.recipe.image}\n      ingredients={recipe.recipe.ingredients}\n      />\n    ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\"};"],"sourceRoot":""}